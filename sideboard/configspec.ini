
debug = boolean(default=False)

# Directory where core Sideboard pages look for plugins.
template_dir = string(default="%(module_root)s/templates")

# Directory in which Sideboard looks for plugins.
plugins_dir = string(default="%(root)s/plugins")

# Sometimes plugins want to import from other plugins.  This requires that some
# must be loaded before others.  Plugins are loaded first in the order they are
# found here and then in an arbitrary order after that.
priority_plugins = string_list(default=list())

# When someone visits an unknown URL then we redirect them to this configured
# URL, which by default is the page which shows a list of installed plugins.
#
# Each plugin may define its own default URL.  However, since there can be only
# one default, there's a second "priority" option.  If more than one plugin
# defines a default URL, the defined URL with the highest priority is used.
default_url = string(default="/list_plugins")
default_url_priority = integer(default=0)

# Default client cert information.  Any rpc_services entry will default to
# these values if not overridden in their own section.
ca = string(default="")
client_key = string(default="")
client_cert = string(default="")
ssl_version = string(default="PROTOCOL_TLSv1")

ws.thread_pool = integer(default=25)
ws.call_timeout = integer(default=10) # seconds
ws.poll_interval = integer(default=300) # seconds
ws.reconnect_interval = integer(default=60) # seconds

# Sideboard exposes two websocket endpoints.  The first is at /wsrpc and doesn't
# require authentication, with the expectation being that the frontend webserver
# which reverse proxies to Sideboard will either block or require a client cert
# for this endpoint.  The second is at /ws and by default requires a logged-in
# user to work.  This setting can turn off that authentication check, which is
# useful for development or for applications which require no authentication.
ws.auth_required = boolean(default=True)

# When performing authentication for the /ws websocket endpoint, this setting
# determines which session field must be set for the request to be considered
# "logged in".  If your application sets a session field other than "username"
# when a user logs in, you should change this setting to the name of that field.
ws.auth_field = string(default="username")

# When an authenticated websocket is established on the /ws endpoint, we copy
# this configurable list of session fields into the websocket and make them
# available as threadlocal fields on every websocket RPC requests.  By default
# we only do this with the username of the logged-in user, but applications
# which store other data for logged in users can add those fields to this list.
ws.session_fields = string_list(default=list("username"))

# If the "debug" option is set, the default login form will allow people to log
# in with any username using this password.
debug_password = string(default="testpassword")

# Sideboard has numerous background threads which wait on sideboard.lib.stopped
# to either sleep or bail immediately on shutdown.  Since these threads wait in
# a loop, we don't want to set an interval too small or we'll eat a lot of CPU
# while doing absolutely nothing.  A hard-coded value of 1 second would probably
# be fine for all workloads, but we've made it configurable just in case.
thread_wait_interval = float(default=1)

# Plugins can register different authenticators, since different applications may
# have different ideas about what it means to be "logged in".  The default
# authenticator is mainly used for the /ws and /json RPC endpoints, so this
# option should be changed on systems where a plugin provides a new method we
# want to use as our default.
default_authenticator = string(default="default")


[plugins]
sqlite_dir = string(default="%(root)s/db")


[cherrypy]
engine.autoreload.on = boolean(default=False)

# See http://cherrypydocrework.readthedocs.io/pkg/cherrypy.lib.html#module-cherrypy.lib.profiler
profiling.on = boolean(default=True)
profiling.path = string(default="%(root)s/data/profiler")

# If True, profile data for all HTTP requests will go in a single file.
# If False, each HTTP request will dump its profile data into a separate file.
profiling.aggregate = boolean(default=True)

# See https://docs.python.org/3/library/profile.html#pstats.Stats.strip_dirs
profiling.strip_dirs = boolean(default=False)

server.socket_host = string(default="127.0.0.1")
server.socket_port = integer(default=8282)

tools.reset_threadlocal.on = boolean(default=True)

tools.sessions.on = boolean(default=True)
tools.sessions.path = string(default="/")
tools.sessions.timeout = integer(default=30)
tools.sessions.storage_type = string(default="file")
tools.sessions.storage_path = string(default="%(root)s/data/sessions")
tools.sessions.secure = boolean(default=False)

checker.check_skipped_app_config = boolean(default=False)


[rpc_services]
___many___ = string

[[__many__]]
jsonrpc_only = boolean(default=False)


[loggers]
root = option("TRACE", "DEBUG", "INFO", "WARN", "WARNING", "ERROR", "CRITICAL", default="DEBUG")
cherrypy.error = option("TRACE", "DEBUG", "INFO", "WARNING", "WARN", "ERROR", "CRITICAL", default="DEBUG")
cherrypy.access = option("TRACE", "DEBUG", "INFO", "WARNING", "WARN", "ERROR", "CRITICAL", default="CRITICAL")
__many__ = option("TRACE", "DEBUG", "INFO", "WARN", "WARNING", "ERROR", "CRITICAL", default="INFO")

[handlers]
[[__many__]]
formatter = string(default="default")
___many___ = string()

[formatters]
[[default]]
format = string(default="$$(asctime)s [$$(levelname)s] $$(name)s: $$(message)s")
datefmt = string(default="")
[[__many__]]
format = string
datefmt = string(default="")
